package com.cibo.provenance.monaidcs

/**
  * Created by ssmith on 11/06/17.
  *
  * A builtin FunctionWithProvenance that calls apply(i) on a Seq.
  *
  */

import com.cibo.provenance.tracker.ResultTracker
import com.cibo.provenance._

class ApplyWithProvenance[O] extends Function2WithProvenance[O, Seq[O], Int]  {
  val currentVersion = NoVersion

  override protected def runCall(call: Call)(implicit rt: ResultTracker): Result = {
    val seqV: ValueWithProvenance[Seq[O]] = call.v1
    val nV: ValueWithProvenance[Int] = call.v2
    seqV match {
      case inputMapCall: MapWithProvenance[O, _]#Call =>
        val a: ApplyWithProvenance[O]#Call = inputMapCall.apply(nV)
        val ff: inputMapCall.function.
        val f: Function1WithProvenance[O, a.] = inputMapCall.v2.resolve.output.asInstanceOf[Function1WithProvenance[O, a.type]]
        val b = f(a)
      case other =>
        super.runCall(call)(rt)
    }
  }

  def impl(seq: Seq[O], n: Int): O =
    seq(n)
}

object ApplyWithProvenance {
  def apply[O] = new ApplyWithProvenance[O]
}

